* Basic
** Insert
- 描述
  INSERT INTO 语句用于向表格中插入新的行。
- 语法
  INSERT INTO 表名称 VALUES (值 1, 值 2,....)
  我们也可以指定所要插入数据的列：
  INSERT INTO table_name (列 1, 列 2,...) VALUES (值 1, 值 2,....)
- 示例
  INSERT INTO Persons VALUES ('Gates', 'Bill', 'Xuanwumen 10', 'Beijing')
** 更新数据 Update
- 描述
  Update 语句用于修改表中的数据。
- 语法
  UPDATE 表名称 SET 列名称 = 新值 WHERE 列名称 = 某值
- 示例
  UPDATE Person SET FirstName = 'Fred' WHERE LastName = 'Wilson' 
  UPDATE Person SET Address = 'Zhongshan 23', City = 'Nanjing' WHERE LastName = 'Wilson'
** 删除 delete
- 描述
  DELETE 语句用于删除表中的行。
- 语法
  DELETE FROM 表名称 WHERE 列名称 = 值
- 示例
  DELETE FROM Person WHERE LastName = 'Wilson' 
  DELETE FROM table_name
* Advanced
** Top
- 描述
  TOP 子句用于规定要返回的记录的数目。
- 语法
  SQL server
  SELECT TOP number|percent column_name(s) FROM table_name
  MySQL
  SELECT column_name(s) FROM table_name LIMIT number
  Oracle
  SELECT column_name(s) FROM table_name WHERE ROWNUM <= number
- 示例
  SELECT TOP 2 * FROM Persons
** LIKE
- 描述
  LIKE 操作符用于在 WHERE 子句中搜索列中的指定模式。
- 语法
  SELECT column_name(s) FROM table_name WHERE column_name LIKE pattern
- 示例
  SELECT * FROM Persons WHERE City LIKE 'N%' 
  SELECT * FROM Persons WHERE City LIKE '%lon%'
  SELECT * FROM Persons WHERE City NOT LIKE '%lon%'
- 通配符
  在搜索数据库中的数据时，SQL 通配符可以替代一个或多个字符。
  SQL 通配符必须与 LIKE 运算符一起使用。 
  在 SQL 中，可使用以下通配符：
  | 通配符       | 描述                       |
  |--------------+----------------------------|
  | %	          | 替代一个或多个字符         |
  | _	          | 仅替代一个字符             |
  | [charlist]	 | 字符列中的任何单一字符     |
  | [^charlist]  | 不在字符列中的任何单一字符 |
  | [!charlist]  |                            |
** IN
- 描述
  IN 操作符允许我们在 WHERE 子句中规定多个值。
- 语法
  SELECT column_name(s) FROM table_name WHERE column_name IN (value1,value2,...)
- 示例
  SELECT * FROM Persons WHERE LastName IN ('Adams','Carter')
** BETWEEN
- 描述
  操作符 BETWEEN ... AND 会选取介于两个值之间的数据范围。这些值可以是数值、文本或者日期。
- 语法
  SELECT column_name(s) FROM table_name WHERE column_name BETWEEN value1 AND value2
- 示例
  SELECT * FROM Persons WHERE LastName BETWEEN 'Adams' AND 'Carter'
  SELECT * FROM Persons WHERE LastName NOT BETWEEN 'Adams' AND 'Carter'
** ALIAS
- 描述
  通过使用 SQL，可以为列名称和表名称指定别名（Alias）。
- 语法
  SELECT column_name(s) FROM table_name AS alias_name
  SELECT column_name(s) FROM table_name WHERE column_name IN (value1,value2,...)
- 示例
  SELECT po.OrderID, p.LastName, p.FirstName FROM Persons AS p, Product_Orders AS po WHERE p.LastName='Adams' AND p.FirstName='John'
  SELECT LastName AS Family, FirstName AS Name FROM Persons
** JOIN
- 描述
  SQL join 用于根据两个或多个表中的列之间的关系，从这些表中查询数据。
  Join 和 Key Key 是唯一的
- 语法
  不同的 SQL JOIN
  除了我们在上面的例子中使用的 INNER JOIN（内连接），我们还可以使用其他几种连接。
  下面列出了您可以使用的 JOIN 类型，以及它们之间的差异。
  JOIN: 如果表中有至少一个匹配，则返回行  == INNER JOIN
  LEFT JOIN: 即使右表中没有匹配，也从左表返回所有的行
  RIGHT JOIN: 即使左表中没有匹配，也从右表返回所有的行
  FULL JOIN: 只要其中一个表中存在匹配，就返回行
- 示例
  SELECT Persons.LastName, Persons.FirstName, Orders.OrderNo FROM Persons, Orders WHERE Persons.Id_P = Orders.Id_P 
  SELECT Persons.LastName, Persons.FirstName, Orders.OrderNo FROM Persons INNER JOIN Orders ON Persons.Id_P = Orders.Id_P ORDER BY Persons.LastName
** LEFT JOIN
- 描述
  LEFT JOIN 关键字会从左表 (table_name1) 那里返回所有的行，即使在右表 (table_name2) 中没有匹配的行。
- 语法
  SELECT column_name(s) FROM table_name1 LEFT JOIN table_name2 ON table_name1.column_name=table_name2.column_name
- 示例
  SELECT Persons.LastName, Persons.FirstName, Orders.OrderNo FROM Persons LEFT JOIN Orders ON Persons.Id_P=Orders.Id_P ORDER BY Persons.LastName
** RIGHT JOIN
- 描述
  RIGHT JOIN 关键字会右表 (table_name2) 那里返回所有的行，即使在左表 (table_name1) 中没有匹配的行。
- 语法
  SELECT column_name(s) FROM table_name1 RIGHT JOIN table_name2 ON table_name1.column_name=table_name2.column_name 
- 示例
  SELECT Persons.LastName, Persons.FirstName, Orders.OrderNo FROM Persons RIGHT JOIN Orders ON Persons.Id_P=Orders.Id_P ORDER BY Persons.LastName
** FULL JOIN
- 描述
  只要其中某个表存在匹配，FULL JOIN 关键字就会返回行。
- 语法
  SELECT column_name(s) FROM table_name1 FULL JOIN table_name2 ON table_name1.column_name=table_name2.column_name
- 示例
  SELECT Persons.LastName, Persons.FirstName, Orders.OrderNo FROM Persons FULL JOIN Orders ON Persons.Id_P=Orders.Id_P ORDER BY Persons.LastName
** UNION
- 描述
  UNION 操作符用于合并两个或多个 SELECT 语句的结果集。
  请注意，UNION 内部的 SELECT 语句必须拥有相同数量的列。列也必须拥有相似的数据类型。同时，每条 SELECT 语句中的列的顺序必须相同
- 语法
  SELECT column_name(s) FROM table_name1
  UNION
  SELECT column_name(s) FROM table_name2
  注释：默认地，UNION 操作符选取不同的值。如果允许重复的值，请使用 UNION ALL。 
  SELECT column_name(s) FROM table_name1
  UNION ALL
  SELECT column_name(s) FROM table_name2
- 示例
  SELECT E_Name FROM Employees_China
  UNION
  SELECT E_Name FROM Employees_USA
** SELECT INTO
- 描述
  SELECT INTO 语句从一个表中选取数据，然后把数据插入另一个表中。SELECT INTO 语句常用于创建表的备份复件或者用于对记录进行存档。
- 语法
  SELECT * INTO new_table_name [IN externaldatabase] FROM old_tablename
  SELECT column_name(s) INTO new_table_name [IN externaldatabase] FROM old_tablename
- 示例
  SELECT * INTO Persons_backup FROM Persons
  SELECT * INTO Persons IN 'Backup.mdb' FROM Persons
  SELECT LastName,FirstName INTO Persons_backup FROM Persons
  SELECT LastName,Firstname INTO Persons_backup FROM Persons WHERE City='Beijing'
  SELECT Persons.LastName,Orders.OrderNo INTO Persons_Order_Backup FROM Persons INNER JOIN Orders ON Persons.Id_P=Orders.Id_P
** CREATE DB
- 描述
  CREATE DATABASE 用于创建数据库。
- 语法
  CREATE DATABASE database_name
- 示例
  CREATE DATABASE my_db
** CREATE TABLE
- 描述
  CREATE TABLE 语句用于创建数据库中的表。
- 语法
  CREATE TABLE 表名称
  (
    列名称 1 数据类型,
    列名称 2 数据类型,
    列名称 3 数据类型,
    ....
  )
  
  数据类型	           描述
  integer(size)      仅容纳整数。在括号内规定数字的最大位数。
  int(size)
  smallint(size)
  tinyint(size)

  decimal(size,d)    容纳带有小数的数字。
  numeric(size,d)    "size" 规定数字的最大位数。"d" 规定小数点右侧的最大位数。
  char(size)         容纳固定长度的字符串（可容纳字母、数字以及特殊字符）。 在括号中规定字符串的长度。
  varchar(size)      容纳可变长度的字符串（可容纳字母、数字以及特殊的字符）。 在括号中规定字符串的最大长度。
  date(yyyymmdd)	   容纳日期。
- 示例
  CREATE TABLE Persons
  (
    Id_P int,
    LastName varchar(255),
    FirstName varchar(255),
    Address varchar(255),
    City varchar(255)
  )
** Constraints
- 描述
  约束用于限制加入表的数据的类型。
  可以在创建表时规定约束（通过 CREATE TABLE 语句），或者在表创建之后也可以（通过 ALTER TABLE 语句）。
*** NOT NULL
- 描述
  NOT NULL 约束强制列不接受 NULL 值。
  NOT NULL 约束强制字段始终包含值。这意味着，如果不向字段添加值，就无法插入新记录或者更新记录。
- 语法
  CREATE TABLE 时增加 NOT NULL
- 示例
  下面的 SQL 语句强制 "Id_P" 列和 "LastName" 列不接受 NULL 值：
  CREATE TABLE Persons
  (
  Id_P int NOT NULL,
  LastName varchar(255) NOT NULL,
  FirstName varchar(255),
  Address varchar(255),
  City varchar(255)
  )
*** UNIQUE 
- 描述
  UNIQUE 约束唯一标识数据库表中的每条记录。
  UNIQUE 和 PRIMARY KEY 约束均为列或列集合提供了唯一性的保证。
  PRIMARY KEY 拥有自动定义的 UNIQUE 约束。
  请注意，每个表可以有多个 UNIQUE 约束，但是每个表只能有一个 PRIMARY KEY 约束。
- 语法
  1. CREATE TABLE 时增加 UNIQUE() 设定变量
  2. 当表已被创建时，如需在 "Id_P" 列创建 UNIQUE 约束，请使用下列 SQL：
     ALTER TABLE Persons
     ADD UNIQUE (Id_P)
  3. 如需撤销 UNIQUE 约束，请使用下面的 SQL：
     ALTER TABLE Persons
     DROP INDEX uc_PersonID
- 示例
  MYSQL:
  CREATE TABLE Persons
  (
  Id_P int NOT NULL,
  LastName varchar(255) NOT NULL,
  FirstName varchar(255),
  Address varchar(255),
  City varchar(255),
  UNIQUE (Id_P)
  )
  
  ORACLE:
  CREATE TABLE Persons
  (
  Id_P int NOT NULL UNIQUE,
  LastName varchar(255) NOT NULL,
  FirstName varchar(255),
  Address varchar(255),
  City varchar(255)
  )
  
  CREATE TABLE Persons
  (
  Id_P int NOT NULL,
  LastName varchar(255) NOT NULL,
  FirstName varchar(255),
  Address varchar(255),
  City varchar(255),
  CONSTRAINT uc_PersonID UNIQUE (Id_P,LastName)
  )
*** PRIMARY KEY
- 描述
  PRIMARY KEY 约束唯一标识数据库表中的每条记录。
  主键必须包含唯一的值。
  主键列不能包含 NULL 值。
  每个表都应该有一个主键，并且每个表只能有一个主键。
- 语法
  1. CREATE TABLE 时增加 PRIMARY KEY ()
  2. 当表已被创建时，如需在 "Id_P" 列创建 PRIMARY KEY 约束，请使用下列 SQL：
     ALTER TABLE Persons
     ADD PRIMARY KEY (Id_P)
  3. 如需撤销 PRIMARY KEY 约束，请使用下面的 SQL：
     ALTER TABLE Persons
     DROP PRIMARY KEY
- 示例
  MYSQL:
  CREATE TABLE Persons
  (
  Id_P int NOT NULL,
  LastName varchar(255) NOT NULL,
  FirstName varchar(255),
  Address varchar(255),
  City varchar(255),
  PRIMARY KEY (Id_P)
  )
*** FOREIGN KEY
- 描述
  一个表中的 FOREIGN KEY 指向另一个表中的 PRIMARY KEY。
  "Persons" 表中的 "Id_P" 列是 "Persons" 表中的 PRIMARY KEY。
  "Orders" 表中的 "Id_P" 列是 "Orders" 表中的 FOREIGN KEY。
  FOREIGN KEY 约束用于预防破坏表之间连接的动作。
  FOREIGN KEY 约束也能防止非法数据插入外键列，因为它必须是它指向的那个表中的值之一。
- 语法
  1. CREATE TABLE 时增加 FOREIGN KEY (xxx) REFERENCES othertable(XXX)
  2. 当表已被创建时，如需在 "Id_P" 列创建 PRIMARY KEY 约束，请使用下列 SQL：
     ALTER TABLE Orders
     ADD FOREIGN KEY (Id_P)
     REFERENCES Persons(Id_P)
  3. 如需撤销 PRIMARY KEY 约束，请使用下面的 SQL：
     ALTER TABLE Orders
     DROP FOREIGN KEY XXX
- 示例
  CREATE TABLE Orders
  (
  Id_O int NOT NULL,
  OrderNo int NOT NULL,
  Id_P int,
  PRIMARY KEY (Id_O),
  FOREIGN KEY (Id_P) REFERENCES Persons(Id_P)
  )
*** CHECK
- 描述
  CHECK 约束用于限制列中的值的范围。
  如果对单个列定义 CHECK 约束，那么该列只允许特定的值。
  如果对一个表定义 CHECK 约束，那么此约束会在特定的列中对值进行限制。
- 语法
  1. CREATE TABLE 时增加 CHECK (condition)
  2. 当表已被创建时，如需在 "Id_P" 列创建 CHECK 约束，请使用下列 SQL：
     ALTER TABLE Orders
     ADD CHECK (condition)
  3. 如需撤销 CHECK 约束，请使用下面的 SQL：
     ALTER TABLE Orders
     DROP CHECK (condition)
- 示例
  CREATE TABLE Persons
  (
  Id_P int NOT NULL,
  LastName varchar(255) NOT NULL,
  FirstName varchar(255),
  Address varchar(255),
  City varchar(255),
  CHECK (Id_P>0)
  )
*** DEFAULT
- 描述
  DEFAULT 约束用于向列中插入默认值。
  如果没有规定其他的值，那么会将默认值添加到所有的新记录。
- 语法
  1. CREATE TABLE 时,变量后面增加 DEFAULT XXX
  2. 当表已被创建时:
     ALTER TABLE Persons
     ALTER City SET DEFAULT 'SANDNES'
  3. 如需撤销:
     ALTER TABLE Persons
     ALTER City DROP DEFAULT
- 示例
  CREATE TABLE Persons
  (
  Id_P int NOT NULL,
  LastName varchar(255) NOT NULL,
  FirstName varchar(255),
  Address varchar(255),
  City varchar(255) DEFAULT 'Sandnes'
  )
** CREATE INDEX
- 描述
  CREATE INDEX 语句用于在表中创建索引。
  在不读取整个表的情况下，索引使数据库应用程序可以更快地查找数据。
  您可以在表中创建索引，以便更加快速高效地查询数据。 用户无法看到索引，它们只能被用来加速搜索/查询。
  注释：更新一个包含索引的表需要比更新一个没有索引的表更多的时间，这是由于索引本身也需要更新。因此，理想的做法是仅仅在常常被搜索的列（以及表）上面创建索引。
- 语法
  CREATE INDEX index_name ON table_name (column_name)         //允许重复
  CREATE UNIQUE INDEX index_name ON table_name (column_name)  //不允许重复
- 示例
  CREATE INDEX PersonIndex ON Person (LastName) 
  CREATE INDEX PersonIndex ON Person (LastName DESC) 
  CREATE INDEX PersonIndex ON Person (LastName, FirstName)
** DROP 撤销索引、表以及数据库
- 描述
  我们可以使用 DROP INDEX 命令删除表格中的索引。
  也可以 DROP 表和数据库
- 语法
  用于 Microsoft SQLJet (以及 Microsoft Access) 的语法:
    DROP INDEX index_name ON table_name
  用于 MS SQL Server 的语法:
    DROP INDEX table_name.index_name
  用于 IBM DB2 和 Oracle 语法:
    DROP INDEX index_name
  用于 MySQL 的语法:
    ALTER TABLE table_name DROP INDEX index_name
  DROP TABLE 语句用于删除表（表的结构、属性以及索引也会被删除）：
    DROP TABLE 表名称
  DROP DATABASE 语句用于删除数据库：
    DROP DATABASE 数据库名称
  如果我们仅仅需要除去表内的数据，但并不删除表本身，那么我们该如何做呢？ 请使用 TRUNCATE TABLE 命令（仅仅删除表格中的数据）：
    TRUNCATE TABLE 表名称
- 示例
  DROP TABLE PERSON
** ALTER 切换表
- 描述
  ALTER TABLE 语句用于在已有的表中添加、修改或删除列。
- 语法
  如需在表中添加列，请使用下列语法:
    ALTER TABLE table_name
    ADD column_name datatype
  要删除表中的列，请使用下列语法：
    ALTER TABLE table_name 
    DROP COLUMN column_name
    注释：某些数据库系统不允许这种在数据库表中删除列的方式 (DROP COLUMN column_name)。
  要改变表中列的数据类型，请使用下列语法：
    ALTER TABLE table_name
    ALTER COLUMN column_name datatype
- 示例
  ALTER TABLE Persons
  ADD Birthday date
  删除 Birthday 列
    ALTER TABLE Person
    DROP COLUMN Birthday
** AUTO INCREMENT
- 描述
  我们通常希望在每次插入新记录时，自动地创建主键字段的值。 我们可以在表中创建一个 auto-increment 字段。
- 语法
  CREATE TABLE 时，在对应的 列声明后面增加 AUTO_INCREMENT 字段
  默认地，AUTO_INCREMENT 的开始值是 1，每条新记录递增 1。
  要让 AUTO_INCREMENT 序列以其他的值起始，请使用下列 SQL 语法：
    ALTER TABLE Persons AUTO_INCREMENT=100
- 示例
  CREATE TABLE Persons
  (
  P_Id int NOT NULL AUTO_INCREMENT,
  LastName varchar(255) NOT NULL,
  FirstName varchar(255),
  Address varchar(255),
  City varchar(255),
  PRIMARY KEY (P_Id)
  )
** VIEW 视图
- 描述
  在 SQL 中，视图是基于 SQL 语句的结果集的可视化的表。
  视图包含行和列，就像一个真实的表。视图中的字段就是来自一个或多个数据库中的真实的表中的字段。我们可以向视图添加 SQL 函数、WHERE 以及 JOIN 语句，我们也可以提交数据，就像这些来自于某个单一的表。
  注释：数据库的设计和结构不会受到视图中的函数、where 或 join 语句的影响。
- 语法
  创建视图
  CREATE VIEW view_name AS
  SELECT column_name(s) FROM table_name WHERE condition
  更新视图
  REPLACE VIEW view_name AS
  SELECT column_name(s) FROM table_name WHERE condition
  删除视图
  DROP VIEW viewname
- 示例
  CREATE VIEW [Current Product List] AS
  SELECT ProductID,ProductName FROM Products WHERE Discontinued=No
  SELECT * FROM [Current Product List]
  
  Northwind 样本数据库的另一个视图会选取 Products 表中所有单位价格高于平均单位价格的产品：
    CREATE VIEW [Products Above Average Price] AS
    SELECT ProductName,UnitPrice FROM Products WHERE UnitPrice>(SELECT AVG(UnitPrice) FROM Products) 
  我们可以像这样查询上面这个视图：
    SELECT * FROM [Products Above Average Price]
** DATE 函数
- 描述
  当我们处理日期时，最难的任务恐怕是确保所插入的日期的格式，与数据库中日期列的格式相匹配。
  只要数据包含的只是日期部分，运行查询就不会出问题。但是，如果涉及时间，情况就有点复杂了。
  在讨论日期查询的复杂性之前，我们先来看看最重要的内建日期处理函数。
- 语法
  MySQL Date 函数
  下面的表格列出了 MySQL 中最重要的内建日期函数：
  函数	描述
  NOW()	返回当前的日期和时间
  CURDATE()	返回当前的日期
  CURTIME()	返回当前的时间
  DATE()	提取日期或日期/时间表达式的日期部分
  EXTRACT()	返回日期/时间按的单独部分
  DATE_ADD()	给日期添加指定的时间间隔
  DATE_SUB()	从日期减去指定的时间间隔
  DATEDIFF()	返回两个日期之间的天数
  DATE_FORMAT()	用不同的格式显示日期/时间

  MySQL 使用下列数据类型在数据库中存储日期或日期/时间值：
  DATE - 格式 YYYY-MM-DD
  DATETIME - 格式: YYYY-MM-DD HH:MM:SS
  TIMESTAMP - 格式: YYYY-MM-DD HH:MM:SS
  YEAR - 格式 YYYY 或 YY
- 示例
  SELECT * FROM Orders WHERE OrderDate='2008-12-26'
** NULL
- 描述
  如果表中的某个列是可选的，那么我们可以在不向该列添加值的情况下插入新记录或更新已有的记录。这意味着该字段将以 NULL 值保存。
  NULL 值的处理方式与其他值不同。
  NULL 用作未知的或不适用的值的占位符。
  注释：无法比较 NULL 和 0；它们是不等价的。
- 语法
  IS NULL 或者 IS NOT NULL 判断是否 NULL
- 示例
  SELECT LastName,FirstName,Address FROM Persons WHERE Address IS NULL
  SELECT LastName,FirstName,Address FROM Persons WHERE Address IS NOT NULL
** ISNULL()
- 描述
  ISNULL 说明如何处理 NULL 函数
- 语法
  ISNULL(column, value) 如果是 NULL，设为 0
- 示例
  SELECT ProductName,UnitPrice*(UnitsInStock+IFNULL(UnitsOnOrder,0)) FROM Products
** 数据类型
- 描述
  MySQL 数据类型
  在 MySQL 中，有三种主要的类型：文本、数字和日期/时间类型。
  - Text 类型：
    数据类型	描述
    CHAR(size)	保存固定长度的字符串（可包含字母、数字以及特殊字符）。在括号中指定字符串的长度。最多 255 个字符。
    VARCHAR(size)	
      保存可变长度的字符串（可包含字母、数字以及特殊字符）。在括号中指定字符串的最大长度。最多 255 个字符。
      注释：如果值的长度大于 255，则被转换为 TEXT 类型。
    TINYTEXT	存放最大长度为 255 个字符的字符串。
    TEXT	存放最大长度为 65,535 个字符的字符串。
    BLOB	用于 BLOBs (Binary Large OBjects)。存放最多 65,535 字节的数据。
    MEDIUMTEXT	存放最大长度为 16,777,215 个字符的字符串。
    MEDIUMBLOB	用于 BLOBs (Binary Large OBjects)。存放最多 16,777,215 字节的数据。
    LONGTEXT	存放最大长度为 4,294,967,295 个字符的字符串。
    LONGBLOB	用于 BLOBs (Binary Large OBjects)。存放最多 4,294,967,295 字节的数据。
    ENUM(x,y,z,etc.)	
      允许你输入可能值的列表。可以在 ENUM 列表中列出最大 65535 个值。如果列表中不存在插入的值，则插入空值。
      注释：这些值是按照你输入的顺序存储的。
      可以按照此格式输入可能的值：ENUM('X','Y','Z')
      SET	与 ENUM 类似，SET 最多只能包含 64 个列表项，不过 SET 可存储一个以上的值。
  - Number 类型：
    数据类型	描述
    TINYINT(size)	-128 到 127 常规。0 到 255 无符号*。在括号中规定最大位数。
    SMALLINT(size)	-32768 到 32767 常规。0 到 65535 无符号*。在括号中规定最大位数。
    MEDIUMINT(size)	-8388608 到 8388607 普通。0 to 16777215 无符号*。在括号中规定最大位数。
    INT(size)	-2147483648 到 2147483647 常规。0 到 4294967295 无符号*。在括号中规定最大位数。
    BIGINT(size)	-9223372036854775808 到 9223372036854775807 常规。0 到 18446744073709551615 无符号*。在括号中规定最大位数。
    FLOAT(size,d)	带有浮动小数点的小数字。在括号中规定最大位数。在 d 参数中规定小数点右侧的最大位数。
    DOUBLE(size,d)	带有浮动小数点的大数字。在括号中规定最大位数。在 d 参数中规定小数点右侧的最大位数。
    DECIMAL(size,d)	作为字符串存储的 DOUBLE 类型，允许固定的小数点。
    这些整数类型拥有额外的选项 UNSIGNED。通常，整数可以是负数或正数。如果添加 UNSIGNED 属性，那么范围将从 0 开始，而不是某个负数。
  - Date 类型：
    数据类型	描述
    DATE()  日期。格式：YYYY-MM-DD
            注释：支持的范围是从 '1000-01-01' 到 '9999-12-31'
    DATETIME()  日期和时间的组合。格式：YYYY-MM-DD HH:MM:SS
                注释：支持的范围是从 '1000-01-01 00:00:00' 到 '9999-12-31 23:59:59'
    TIMESTAMP() 时间戳。TIMESTAMP 值使用 Unix 纪元('1970-01-01 00:00:00' UTC) 至今的描述来存储。格式：YYYY-MM-DD HH:MM:SS
                注释：支持的范围是从 '1970-01-01 00:00:01' UTC 到 '2038-01-09 03:14:07' UTC
    TIME()	时间。格式：HH:MM:SS 注释：支持的范围是从 '-838:59:59' 到 '838:59:59'
    YEAR()  2 位或 4 位格式的年。
            注释：4 位格式所允许的值：1901 到 2155。2 位格式所允许的值：70 到 69，表示从 1970 到 2069。
            即便 DATETIME 和 TIMESTAMP 返回相同的格式，它们的工作方式很不同。在 INSERT 或 UPDATE 查询中，
             TIMESTAMP 自动把自身设置为当前的日期和时间。TIMESTAMP 也接受不同的格式，比如 YYYYMMDDHHMMSS、YYMMDDHHMMSS、YYYYMMDD 或 YYMMDD。
